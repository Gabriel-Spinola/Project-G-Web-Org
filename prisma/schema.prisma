// @author Gabriel Spinola Mendes da Silva | gabrielspinola77@gmail.com
// @author Lucas Vinicius Pereira Martis | lucasvinipessoal@gmail.com

// @project Project G
// @version main-release
// @license i.e. MIT

// LINK: learn more about it in the docs: https://pris.ly/d/prisma-schema
// LINK: Next-Auth Adapters: https://authjs.dev/reference/adapters#models

// `npx prisma init`
// `npx prisma studio`

// Now you can adjust your database schema by creating the actual tables in the database. Run the following command:
// `npx prisma db push`

// Because Prisma Client is tailored to your own schema, you need to update it every time your Prisma schema file is changing by running the following command:
// `npx prisma generate`

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
  id          String    @id @default(cuid())
  content     String?
  images      String?
  published   Boolean   @default(false)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  author      User?     @relation("Author", fields: [authorId], references: [id])
  authorId    String?
  contributor User[]    @relation("Contributor")
  comments    Comment[]
  pinnedBy    User?     @relation("PinnedPost", fields: [pinnedById], references: [id])
  pinnedById  String?   @unique
  likedBy     User?     @relation("LikedPost", fields: [likedById], references: [id])
  likedById   String?   @unique
}

model Project {
  id          String    @id @default(cuid())
  title       String
  description String?
  images      String[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  author      User?     @relation("Author", fields: [authorId], references: [id])
  authorId    String?
  contributor User[]    @relation("Contributor")
  comments    Comment[]
  pinnedBy    User?     @relation("PinnedProject", fields: [pinnedById], references: [id])
  pinnedById  String?   @unique
  likedBy     User?     @relation("LikedProject", fields: [likedById], references: [id])
  likedById   String?   @unique
}

model Comment {
  id        String   @id @default(cuid())
  content   String

  isEdited  Boolean  @default(false)

  createdAt DateTime @default(now())

  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Positions {
  DefaultUser
  Professional
  Office
  Admin
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  password            String?

  title               String?
  description         String?
  location            String?
  graduations         String[]
  
  linkedinUrl         String?
  CREA                String
  siteUrl             String?
  contactPhone        Int?
  profilePic          String?

  email               String?   @unique
  emailVerified       DateTime?

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @default(now()) @updatedAt

  position            Positions @default(DefaultUser)
  
  accounts            Account[]
  sessions            Session[]
  authoredPosts       Post[]    @relation("Author")
  contributedPosts    Post[]    @relation("Contributor")
  authoredProjects    Project[] @relation("Author")
  contributedProjects Project[] @relation("Contributor")
  pinnedPosts         Post[]    @relation("PinnedPost")
  likedPosts          Post[]    @relation("LikedPost")
  pinnedProjects      Project[] @relation("PinnedProject")
  likedProjects       Project[] @relation("LikedProject")
  comments            Comment[]

  @@map(name: "users")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
